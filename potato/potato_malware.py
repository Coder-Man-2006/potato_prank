import tkinter as tk
import random
import keyboard
import math

def run():
    # List of potato image file names
    potato_images = [
        'potato1.gif',
        'potato2.gif',
        'potato3.gif',
        'potato4.gif',
        'potato5.gif',
        'potato6.gif',
        'potato7.png',
        'potato8.gif',
        'potato9.gif',
        'potato10.gif',
        'potato11.gif',
        'potato12.gif',
        'potato13.gif',
        'potato14.gif',
        'potato15.gif',
        'potato16.gif',
        'potato17.gif',
        'potato18.gif',
        'potato19.gif',
        'potato20.gif',
        'potato21.gif',
        'potato22.gif',
        'potato23.gif',
        'potato24.gif',
        'potato25.gif',
        'potato26.gif',
        'potato27.gif',
        'potato28.jpg',
        'potato29.jpg',
        'potato30.jpg',
        'potato31.jpg',
    ]

#   Dictionary to store loaded potato images
    loaded_images = {}
    
        # Function to animate the potato
    def animate_potato(potato_label):
        # Generate random velocity components for x and y
        velocity = random.randint(1, 250)
        angle = random.uniform(1, -2*math.pi)
        dx = velocity * math.sin(angle)
        dy = velocity * math.cos(angle)
        
        # Move the potato label
        x = potato_label.winfo_x() - dx
        y = potato_label.winfo_y() + dy
        
        # Check if the potato goes out of the screen bounds
        if x < -potato_label.winfo_width() or x > root.winfo_screenwidth() or \
           y < -potato_label.winfo_height() or y > root.winfo_screenheight():
            potato_label.place_forget()  # Remove the potato from the screen
        else:
            for i in range(2):
                potato_label.place(x=x, y=y)
                potato_label.place(x=x+2, y=y+2)
                
        
        # Schedule the next animation frame
        root.after(20, animate_potato, potato_label)

    def spawn_potato():
        # Load a random potato image
        potato_image = random.choice(potato_images)
        
        # Check if the potato image is already loaded
        if potato_image not in loaded_images:
            loaded_images[potato_image] = tk.PhotoImage(file=potato_image)
        
        # Create a new potato label with the image
        potato_label = tk.Label(root, image=loaded_images[potato_image])
        
        # Generate random coordinates within the screen size
        x = random.randint(0, root.winfo_screenwidth() - loaded_images[potato_image].width())
        y = random.randint(0, root.winfo_screenheight() - loaded_images[potato_image].height())
        
        # Place the potato label at the random coordinates
        potato_label.place(x=x, y=y)
        
        # Animate the potato
        animate_potato(potato_label)

    def spawn_potato_on_space(event):
        if event.keysym == 'space':
            spawn_potato()
            
            for i in range(5):
                root.after(random.randint(1000, 5000), spawn_potato)
            
    def finish(event):
        if event.keysym == 'q':
            root.destroy()

    root = tk.Tk()
    root.title("Potato Spawn")
    root.geometry('500x500')
    root.resizable(True, True)
    
    root.overrideredirect(True)  # Remove the window decorations
    root.attributes("-alpha", 1.0)  # Set the transparency level (0.0 to 1.0)
    root.configure(bg='') 

    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    root.geometry(f"{screen_width}x{screen_height}+0+0")
        
    # Create the potato spawn button
    potato_spawn_button = tk.Button(root, text="Spawn Potato (Space)", command=spawn_potato)
    potato_spawn_button.pack()

    # Bind keys to function
    root.bind('<KeyPress-space>', spawn_potato_on_space)     # Potato Spawn
    root.bind('<KeyPress-q>', finish)                       # Stop command
    
    # Start the main event loop
    root.mainloop()

run()